useRef 
React에서 제공하는 훅(hook) 중 하나로, 함수형 컴포넌트에서 DOM 요소나 어떤 값을 저장하고 참조할 수 있는 방법을 제공합니다.
useRef는 주로 다음과 같은 두 가지 용도로 사용됩니다:

1. DOM 요소 참조
2. 값 저장

1. DOM 요소 참조
useRef를 사용하면 특정 DOM 요소에 직접 접근할 수 있습니다. 
이는 예를 들어, 포커스를 설정하거나, 스크롤 위치를 조정하거나, 기타 직접적인 DOM 조작이 필요할 때 유용합니다.
ex)
import React, { useRef } from 'react';

function TextInputWithFocusButton() {
  const inputEl = useRef(null);

  const onButtonClick = () => {
    // `current` 프로퍼티를 통해 DOM 노드에 접근할 수 있습니다.
    inputEl.current.focus();
  };

  return (
    <div>
      <input ref={inputEl} type="text" />
      <button onClick={onButtonClick}>Focus the input</button>
    </div>
  );
}

2. 값 저장
useRef는 DOM 요소뿐만 아니라 어떤 값이라도 저장할 수 있습니다. 
이 값은 컴포넌트가 다시 렌더링될 때도 유지됩니다. 그러나 값이 변경되어도 컴포넌트를 다시 렌더링하지 않습니다. 
따라서 상태(state) 대신에 렌더링에 영향을 주지 않는 값을 저장할 때 유용합니다.
ex)
import React, { useRef, useState, useEffect } from 'react';

function Timer() {
  const [count, setCount] = useState(0);
  const countRef = useRef(count);

  useEffect(() => {
    countRef.current = count;
  }, [count]);

  useEffect(() => {
    const interval = setInterval(() => {
      console.log('Count:', countRef.current);
    }, 1000);

    return () => clearInterval(interval);
  }, []);

  return (
    <div>
      <p>{count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
}

주요 특징
1) 초기화: useRef는 { current: initialValue } 객체를 반환하며, 여기서 initialValue는 초기값입니다.
2) 변경 가능: useRef를 통해 생성된 객체는 변경 가능하며, 변경되더라도 컴포넌트는 다시 렌더링되지 않습니다.
3) 렌더링 영향 없음: useRef의 값 변경은 컴포넌트의 렌더링에 영향을 미치지 않습니다.

useRef는 상태 관리가 필요 없고, 렌더링 주기와 상관없이 값을 유지해야 하는 경우에 매우 유용합니다. 
이를 통해 복잡한 DOM 조작이나 렌더링 주기를 피할 수 있습니다.
