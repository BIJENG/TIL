MVC구조에 대해서 다시 기술

모델(Model):
모델은 애플리케이션의 데이터와 비즈니스 로직을 나타냅니다.
데이터베이스에서 정보를 읽어오거나 저장하고, 데이터의 유효성 검사나 가공을 수행합니다.
모델은 뷰나 컨트롤러와 독립적으로 존재하며, 데이터 변경에 따라 알림을 보내어 다른 구성 요소들에게 변경 사항을 통지할 수 있습니다.

뷰(View):
뷰는 사용자에게 데이터를 시각적으로 표현하는 역할을 합니다.
사용자 인터페이스를 구성하고, 사용자에게 정보를 보여줍니다.
뷰는 모델의 데이터를 표시하기 위해 모델과 상호작용할 수 있습니다. 하지만 뷰는 모델이나 컨트롤러에 대한 직접적인 접근은 없습니다.

컨트롤러(Controller):
컨트롤러는 사용자 입력을 처리하고, 그에 따라 모델이나 뷰를 업데이트하는 역할을 합니다.
사용자가 애플리케이션과 상호작용할 때 발생하는 이벤트를 처리하고, 그에 따라 적절한 작업을 수행합니다.
컨트롤러는 모델과 뷰 사이의 중개자 역할을 하며, 사용자와 상호작용하여 데이터를 처리하고 결과를 표시합니다.

기본적으로 db에서 데이터를 가져오려면 컨트롤러에서 db를 호출하고 Service부분에서 전달하고 DAO부분에서 구체적으로 db에 가져올
데이터를 선택하는 코드를 작성한다.
가져온 db를 다시 컨트롤러를 통해서 model화 해서 jsp부분에 <% %> 구문을 사용하여 출력 할 수 있다.

ex)
@GetMapping("/board/recommend-detail")
    public String recommendDetail(@RequestParam(name = "wineNo") int wineNo, Model model) {
        // 와인 상세 정보를 가져오는 메서드 호출
        WineVO wine = wineService.getWineByNo(wineNo);
        
        // 가져온 와인 정보를 모델에 추가하여 뷰로 전달
        model.addAttribute("wine", wine);
        
        // 와인 상세 정보를 보여주는 뷰로 이동
        return "/board/recom_content";
    }

컨트롤러에서 와인정보를 가져오는 메서드를 호출한다.


public WineVO getWineByNo(int wineNo) {
        return wineDAO.getWineByNo(wineNo);
    }

서비스 부분에서 NO를 통해 데이터베이스에 맞는 데이터를 가져오는 함수를 만듦

public WineVO getWineByNo(int wineNo) {
        String query = "SELECT * FROM WINE_TBL WHERE NO = ?";
        return jdbcTemplate.queryForObject(query, new Object[]{wineNo}, new WineRowMapper());
    }

dao  부분에서 no를 통해 데이터베이스에 접근해서 해당 no의 데이터를 전부 가져옴
-> 컨트롤러에서 모델화하여 jsp 구문에서 사용가능하도록함 
ex) model.addAttribute("wine", wine);



