배열 (Array)

장점:
고정 크기: 배열은 생성할 때 크기가 고정되므로 메모리 할당이 효율적입니다.
직접 접근: 인덱스를 사용하여 배열 요소에 직접 접근할 수 있어 빠른 읽기 및 쓰기가 가능합니다.
간단한 구조: 배열은 간단한 구조를 가지고 있어 구현이 간단하고 이해하기 쉽습니다.

단점:
고정 크기: 배열은 생성할 때 크기가 고정되므로 요소를 추가하거나 삭제하기 어렵습니다.
메모리 낭비: 배열은 크기를 고정하므로 배열의 크기보다 적은 요소를 가진 경우에도 메모리가 전부 할당됩니다.
실시간 조정이 어려움: 요소의 추가 또는 삭제가 발생할 때 마다 배열을 재조정해야 하므로 실시간으로 조정하기 어려울 수 있습니다.

리스트 (List)
장점:
가변 크기: 리스트는 크기가 동적으로 조정될 수 있어 요소의 추가 및 삭제가 용이합니다.
다양한 연산: 리스트는 요소의 추가, 삭제, 검색, 정렬 등 다양한 연산을 제공합니다.
메모리 효율성: 리스트는 필요한 만큼만 메모리를 사용하므로 메모리 효율성이 높습니다.

단점:
간접 접근: 리스트는 요소에 접근하기 위해 인덱스를 사용하는 배열에 비해 직접 접근이 느릴 수 있습니다.
메모리 오버헤드: 요소의 추가 및 삭제에 따른 리스트의 동적 크기 조정은 메모리 오버헤드를 발생시킬 수 있습니다.
복잡한 구조: 리스트는 내부적으로 링크드 리스트 또는 배열 등의 구조를 사용하므로 구현이 배열보다는 복잡할 수 있습니다.
요약하자면, 배열은 간단하고 빠르지만 크기 조절이 어렵고 메모리 효율성이 낮습니다. 반면에 리스트는 크기 조절이 쉽고 메모리 효율성이 높지만 접근 속도가 상대적으로 느릴 수 있습니다. 선택은 상황과 요구 사항에 따라 다를 것입니다.

------------------------------------------------------------------------------------------------------------------------------

List class 구현

