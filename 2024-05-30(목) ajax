AJAX(Asynchronous JavaScript and XML) 
웹 애플리케이션이 서버와 비동기적으로 데이터를 교환할 수 있게 해주는 기술입니다. 
AJAX를 사용하면 페이지를 새로 고침하지 않고도 웹 페이지의 일부를 업데이트할 수 있습니다. 
AJAX는 여러 가지 기술의 조합으로 이루어져 있으며, 주요 구성 요소는 다음과 같습니다

1. JavaScript: AJAX의 핵심 언어입니다. JavaScript는 브라우저에서 실행되는 클라이언트 측 스크립팅 언어입니다.
2. XMLHttpRequest 객체: AJAX 요청을 생성하고 서버로부터 응답을 받기 위해 사용되는 JavaScript 객체입니다. 최근에는 JSON이 XML을 대체하는 경우가 많습니다.
3. HTML/CSS: 데이터를 표시하고 웹 페이지의 레이아웃과 스타일을 정의하는 데 사용됩니다.
4. DOM (Document Object Model): 웹 페이지의 구조를 나타내며, JavaScript를 통해 이 구조를 동적으로 수정할 수 있습니다.
5. 서버 측 스크립팅 (예: PHP, ASP.NET, Node.js): 서버에서 데이터를 처리하고 클라이언트에게 응답을 반환하는 데 사용됩니다.

AJAX의 동작 원리
1. 이벤트 발생: 사용자가 버튼을 클릭하거나 페이지가 로드되는 등의 이벤트가 발생합니다.
2. XMLHttpRequest 객체 생성: JavaScript에서 XMLHttpRequest 객체를 생성합니다.
3. 서버 요청 설정: open() 메서드를 사용하여 서버로 보낼 요청을 설정합니다.
4. 요청 전송: send() 메서드를 사용하여 서버로 요청을 전송합니다.
5. 서버 응답 처리: 서버가 요청을 처리하고 응답을 반환합니다. 이 응답은 JavaScript의 콜백 함수에서 처리됩니다.
6. 페이지 업데이트: 응답 데이터를 사용하여 웹 페이지의 일부를 업데이트합니다.

ex)
<!DOCTYPE html>
<html>
<head>
    <title>AJAX Example</title>
    <script type="text/javascript">
        function loadData() {
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function() {
                if (xhr.readyState == 4 && xhr.status == 200) {
                    document.getElementById("result").innerHTML = xhr.responseText;
                }
            };
            xhr.open("GET", "data.txt", true);
            xhr.send();
        }
    </script>
</head>
<body>
    <h1>AJAX Example</h1>
    <button type="button" onclick="loadData()">Load Data</button>
    <div id="result"></div>
</body>
</html>
- loadData 함수가 버튼 클릭 시 호출됩니다.
- XMLHttpRequest 객체가 생성되고, onreadystatechange 이벤트 핸들러가 설정됩니다.
- 서버로부터 data.txt 파일을 비동기적으로 요청합니다.
- 서버 응답이 완료되면, 응답 텍스트가 result라는 div 요소에 삽입됩니다.



AJAX의 장점
1. 빠른 사용자 경험: 페이지를 새로 고침하지 않고 필요한 데이터만 갱신하여 더 빠른 사용자 경험을 제공합니다.
2. 서버 부하 감소: 필요한 데이터만 요청하기 때문에 서버의 부하가 줄어듭니다.
3. 더 나은 인터페이스: 동적으로 콘텐츠를 업데이트하여 더 나은 사용자 인터페이스를 제공합니다.

AJAX의 단점
1. 검색 엔진 최적화(SEO) 문제: 비동기적으로 로드된 콘텐츠는 검색 엔진에 의해 인덱싱되지 않을 수 있습니다.
2. 브라우저 호환성 문제: 일부 오래된 브라우저에서는 AJAX가 제대로 동작하지 않을 수 있습니다.
3. 복잡성 증가: 클라이언트와 서버 간의 상호작용이 복잡해질 수 있습니다.
