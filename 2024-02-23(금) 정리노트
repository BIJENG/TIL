const func = function() {}
-> const func = 참조값

즉시 호출 함수 표현(IIFE, Immediately Invoked Function Expression) 
함수를 정의하고 즉시 호출하는 패턴을 말한다. 
이 패턴은 함수를 선언하자마자 실행하고자 할 때 사용된다. 
주로 함수 스코프를 생성하여 변수를 보호하거나 전역 네임스페이스 오염을 방지하기 위해 사용된다.
ex)
(function(){})();   ---> function 생략
((){})();           --->  => 를 써서도 가능하다.
(() => {})();

-----------------------------------------------------------------------------------------

자주쓰는 메서드 정리

forEach() 
배열의 각 요소에 대해 주어진 함수를 실행하는 배열 메서드이다 
이 함수는 주어진 배열의 각 요소에 대해 순차적으로 제공된 함수를 실행하며, 배열을 수정하지 않고 각 요소에 대해 특정 작업을 수행할 때 유용하다.(리턴값이 없다)
ex)
const numbers = [1, 2, 3, 4, 5];

numbers.forEach(function(number) {
  console.log(number);
});


numbers.forEach(function(value, index) {
  console.log(`index : ${index} , value : ${value}`)
})


map() 
배열의 각 요소에 대해 주어진 함수를 호출한 결과를 모아서 새로운 배열을 반환한다. 
기존 배열을 변경하지 않고 각 요소를 변환하여 새로운 배열을 생성하는 데 사용된다.
ex)
const numbers = [1, 2, 3, 4, 5];

const squaredNumbers = numbers.map(function(number) {
  return number * number;
});

console.log(squaredNumbers); // 출력: [1, 4, 9, 16, 25]


filter()
주어진 함수의 조건을 만족하는 요소들로 이루어진 새로운 배열을 반환한다. 
이 메서드는 주어진 조건에 따라 배열을 필터링하여 조건을 충족하는 요소만으로 이루어진 새로운 배열을 생성한다.
ex)
const numbers = [1, 2, 3, 4, 5, 6];

const evenNumbers = numbers.filter(function(number) {
  return number % 2 === 0;
});

console.log(evenNumbers); // 출력: [2, 4, 6]


