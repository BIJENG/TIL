라이브러리(Library):
라이브러리는 재사용 가능한 코드의 집합으로, 특정 기능을 수행하는 함수, 클래스, 모듈 등을 포함합니다.
개발자가 필요할 때마다 라이브러리를 선택하여 프로젝트에 직접 추가하고, 해당 기능을 호출하여 사용할 수 있습니다.
라이브러리는 보통 특정 작업을 수행하기 위한 도구로 사용되며, 개발자가 라이브러리를 호출하고 사용하는 방식에 대한 제어권이 있습니다.
예를 들어, JSON 파싱을 위한 Gson 라이브러리나 데이터베이스 접근을 위한 JDBC 라이브러리 등이 있습니다.

프레임워크(Framework):
프레임워크는 애플리케이션의 구조를 정의하고 제어하는 데 사용되는 재사용 가능한 코드의 집합입니다.
프레임워크는 보통 특정 애플리케이션의 개발을 위한 틀을 제공하며, 개발자가 프레임워크에 따라 코드를 작성하고 확장할 수 있습니다.
프레임워크는 애플리케이션의 흐름을 제어하고, 개발자가 특정 기능을 구현하는 방법을 정의합니다.
예를 들어, 웹 애플리케이션을 개발하기 위한 Spring Framework나 웹 개발을 위한 Django 프레임워크 등이 있습니다.


Spring Boot 
자바 기반의 오픈 소스 프레임워크인 Spring Framework의 일종입니다. Spring Boot는 스프링 애플리케이션을 빠르고 쉽게 구축할 수 있도록 도와주는 도구입니다.

Spring Boot는 다음과 같은 주요 특징을 갖고 있습니다
스타터 패키지(Starter Packages): 필요한 의존성을 포함한 미리 구성된 패키지를 제공하여 프로젝트를 시작할 때 더 쉽게 설정할 수 있습니다.
자동 구성(Auto-Configuration): 설정 작업을 최소화하고 기본적인 설정을 자동으로 제공하여 개발자가 빠르게 개발을 시작할 수 있도록 합니다.
내장 서버(Embedded Server): 내장된 톰캣, 제티 등과 같은 서버를 사용하여 별도의 서버 설치가 필요하지 않습니다.
스프링 부트 스타터(Spring Boot Starter): 스프링 부트 애플리케이션을 개발할 때 필요한 의존성을 선언하고 프로젝트에 추가하는 데 사용됩니다.
액추에이터(Actuator): 애플리케이션의 상태를 모니터링하고 관리하기 위한 엔드포인트를 제공합니다.

JSP(JavaServer Pages)는
자바 기술을 사용하여 동적 웹 페이지를 생성하는 데 사용되는 기술입니다. 
JSP는 HTML 코드 안에 자바 코드를 포함하여 웹 페이지를 동적으로 생성할 수 있도록 합니다. 
JSP는 서버 측에서 실행되며, 클라이언트에게 생성된 HTML 페이지가 전송됩니다.

JSP의 주요 특징과 개념은 다음과 같습니다
태그 기반의 문법: JSP 문서는 HTML 태그와 JSP 태그를 혼합하여 작성됩니다. JSP 태그는 서버 측에서 실행되고 동적으로 생성된 콘텐츠를 표시합니다.
동적 콘텐츠 생성: JSP는 자바 코드를 사용하여 동적으로 콘텐츠를 생성하고 표시할 수 있습니다. 이를 통해 데이터베이스에서 정보를 가져오거나 사용자의 입력을 처리하여 동적인 웹 페이지를 생성할 수 있습니다.
재사용 가능한 컴포넌트: JSP 페이지는 재사용 가능한 컴포넌트로 사용될 수 있습니다. 여러 JSP 페이지에서 공통적으로 사용되는 코드를 분리하여 재사용할 수 있습니다.
내장 객체: JSP는 일부 내장 객체를 제공하여 개발자가 편리하게 웹 애플리케이션을 개발할 수 있도록 합니다. 예를 들어, request, response, session 등의 객체를 사용하여 클라이언트와 서버 간의 상태를 관리할 수 있습니다.
스크립트 요소: JSP 페이지 안에서는 <% %> 태그를 사용하여 자바 코드를 포함할 수 있습니다. 이러한 스크립트 요소를 사용하여 변수 선언, 조건문, 반복문 등의 자바 코드를 작성할 수 있습니다.

URI(Uniform Resource Identifier)는 인터넷 상에서 리소스를 고유하게 식별하는 데 사용되는 문자열의 형식입니다. 
URI는 리소스의 위치나 이름을 지정하며, 웹 브라우저가 웹 서버에 요청을 보낼 때 사용됩니다.

URI는 일반적으로 다음과 같은 형식을 가집니다
scheme:[//[user:password@]host[:port]][/path][?query][#fragment]

Scheme: 리소스에 접근하기 위한 프로토콜을 나타냅니다. 예를 들어, HTTP, HTTPS, FTP 등이 있습니다.
Authority: 호스트명과 포트번호를 포함할 수 있으며, 사용자 정보를 포함하기도 합니다.
Host: 리소스가 위치한 서버의 도메인 이름이나 IP 주소를 나타냅니다.
Port: 서버가 리소스에 접근하기 위해 사용하는 포트 번호를 나타냅니다. 기본값은 scheme에 따라 다르며, HTTP의 경우 80, HTTPS의 경우 443입니다.
Path: 서버에서 리소스의 위치를 나타냅니다. 파일 경로나 서브디렉토리를 포함할 수 있습니다.
Query: 리소스에 대한 추가 정보를 전달하기 위한 매개변수를 나타냅니다. 일반적으로 key=value 형식으로 구성되며, 여러 개의 매개변수는 &로 구분됩니다.
Fragment: 리소스 내의 특정 부분을 가리키는 문자열을 나타냅니다. 주로 웹 페이지의 특정 섹션을 가리키기 위해 사용됩니다.


