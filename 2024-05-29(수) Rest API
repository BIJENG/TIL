REST API(Representational State Transfer Application Programming Interface) 
웹 서비스를 구축하는 데 사용되는 아키텍처 스타일입니다. 
REST는 클라이언트와 서버 간의 상호 작용을 정의하며, 주로 HTTP를 통해 데이터와 기능에 접근하는 방법을 제공합니다. 
REST API는 RESTful 웹 서비스로 알려져 있습니다.

REST API의 주요 개념
1. 리소스(Resource)
REST는 모든 것을 리소스로 간주합니다. 리소스는 URI(Uniform Resource Identifier)로 식별됩니다. 
예를 들어, https://api.example.com/users/123는 특정 사용자를 식별하는 URI입니다.

2. HTTP 메서드
REST API는 HTTP 메서드를 사용하여 리소스에 대한 작업을 정의합니다. 

주요 HTTP 메서드는 다음과 같습니다
GET: 리소스를 조회합니다.
POST: 새로운 리소스를 생성합니다.
PUT: 기존 리소스를 업데이트합니다.
DELETE: 리소스를 삭제합니다.
PATCH: 리소스의 일부를 업데이트합니다.

3. 무상태성(Stateless)
REST API는 무상태성을 유지해야 합니다. 
이는 각 요청이 독립적이며 서버가 클라이언트의 이전 요청을 기억하지 않는다는 것을 의미합니다. 
필요한 모든 정보는 요청에 포함되어야 합니다.

4. 캐시 가능(Cachability)
응답은 캐시 가능해야 합니다. 
클라이언트는 응답을 캐시하고, 서버는 응답에 캐시 가능 여부를 포함시켜야 합니다.
이를 통해 성능을 최적화할 수 있습니다.

5. 계층화 시스템(Layered System)
클라이언트는 중간 서버와 직접 통신할 필요 없이 요청을 보낼 수 있습니다. 
이는 로드 밸런서, 프록시 서버, 게이트웨이 등을 포함할 수 있습니다.

6. 일관된 인터페이스(Uniform Interface)
리소스 간의 상호작용은 일관된 방식으로 이루어져야 합니다. 
이는 REST API의 주요 특징 중 하나로, 다음을 포함합니다

리소스 식별
리소스의 표현
자기 설명 메시지
HATEOAS(Hypermedia As The Engine Of Application State): 응답에 포함된 링크를 통해 리소스 간의 탐색을 지원합니다.


REST API의 설계 원칙
1. 명확한 URI 구조
URI는 리소스를 명확히 식별할 수 있어야 합니다. 
예를 들어, /users, /users/{id}, /products와 같은 구조를 갖습니다.

2. HTTP 상태 코드
요청에 대한 응답은 적절한 HTTP 상태 코드를 포함해야 합니다. 
예를 들어, 성공적인 요청은 200 OK, 리소스가 생성되었을 경우 201 Created, 요청이 잘못된 경우 400 Bad Request, 권한이 없는 경우 401 Unauthorized, 리소스를 찾을 수 없는 경우 404 Not Found 등이 있습니다.

3. 필요한 최소한의 정보 전송
요청과 응답에 필요한 최소한의 정보만 포함시켜야 합니다. 
이는 성능을 최적화하고 네트워크 트래픽을 줄이는 데 도움이 됩니다.

REST API는 웹 애플리케이션에서 데이터를 교환하는 데 매우 유용하며, 클라이언트와 서버 간의 상호 작용을 효율적으로 관리할 수 있는 방법을 제공합니다. 
RESTful 서비스의 설계 원칙을 잘 따르면, 확장 가능하고 유지 보수하기 쉬운 API를 구축할 수 있습니다.




