
1.의존성 추가: 먼저 pom.xml 파일에 Oracle JDBC 드라이버 및 Spring Boot와 Spring Data JPA에 필요한 의존성을 추가합니다.

2.데이터베이스 설정: application.properties 파일을 사용하여 Oracle 데이터베이스 연결 설정을 구성합니다.
ex)
spring.datasource.url=jdbc:oracle:thin:@//localhost:1521/service_name
spring.datasource.username=db_username
spring.datasource.password=db_password
spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver
spring.jpa.hibernate.ddl-auto=update

3.Entity 클래스 생성: 데이터베이스에 저장할 테이블의 엔티티 클래스를 생성합니다.
ex)
@Entity
public class YourEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    private String field1;
    private String field2;
    // Getter and Setter
}

4.API 호출 및 데이터베이스 저장: 스프링 부트 애플리케이션에 API 호출 및 데이터베이스 저장 로직을 추가합니다. MySQL의 경우와 동일한 방법으로 데이터를 저장할 수 있습니다.
ex)
@Service
public class YourService {

    @Autowired
    private YourRepository repository;

    public void fetchDataAndSaveToDatabase() {
        RestTemplate restTemplate = new RestTemplate();
        YourData[] data = restTemplate.getForObject("https://api.example.com/data", YourData[].class);
        
        for (YourData item : data) {
            repository.save(item);
        }
    }
}

5.애플리케이션 실행: 스프링 부트 애플리케이션을 실행하여 데이터를 가져와서 Oracle 데이터베이스에 저장합니다.
