RDBMS는 "관계형 데이터베이스 관리 시스템"의 약자로, 관계형 모델에 기초를 둔 데이터베이스 관리 시스템을 의미합니다. 
이 모델은 데이터를 테이블로 구성하고, 테이블 간의 관계를 정의함으로써 데이터를 구조화합니다. 
이러한 데이터베이스 시스템은 SQL(Structured Query Language)을 사용하여 데이터를 관리하고 질의할 수 있습니다.

RDBMS의 주요 특징은 다음과 같습니다

테이블 기반 구조: 데이터는 테이블 형태로 저장됩니다. 각 테이블은 열(필드)과 행(레코드)으로 구성됩니다.
데이터의 무결성: RDBMS는 데이터의 무결성을 보장합니다. 즉, 데이터가 정확하고 일관성 있게 유지됩니다. 무결성 제약 조건을 통해 데이터의 유효성을 확인할 수 있습니다.
관계 정의: 여러 테이블 간의 관계를 정의할 수 있습니다. 이를 통해 데이터의 중복을 최소화하고 데이터의 일관성을 유지할 수 있습니다.
ACID 특성: RDBMS는 트랜잭션의 원자성(Atomicity), 일관성(Consistency), 고립성(Isolation), 지속성(Durability)을 보장합니다. 이를 통해 데이터베이스의 안정성과 신뢰성을 유지합니다.
SQL 사용: SQL은 RDBMS에서 데이터를 관리하고 질의하는 표준 언어입니다. SQL을 사용하여 데이터를 삽입, 갱신, 삭제하고 쿼리를 실행할 수 있습니다.
복구 및 백업 기능: RDBMS는 데이터의 손실을 방지하기 위해 데이터의 백업과 복구 기능을 제공합니다. 이를 통해 시스템 고장 또는 오류로부터 데이터를 보호할 수 있습니다.


  데이터베이스 주요 연산

셀렉트 연산 (Selection Operation):
셀렉트 연산은 데이터베이스에서 특정 조건을 만족하는 튜플(레코드)들을 선택하는 연산입니다.
일반적으로 SQL에서 WHERE 절을 사용하여 특정 조건을 지정하고, 해당 조건을 만족하는 행만을 선택하여 결과를 반환합니다.
예를 들어, "고객 중에서 나이가 30세 이상인 고객"과 같은 조건을 설정하여 해당 조건을 만족하는 고객 데이터를 선택할 수 있습니다.

프로젝트 연산 (Projection Operation):
프로젝트 연산은 데이터베이스에서 필요한 열(속성)들만 선택하는 연산입니다.
일반적으로 SQL에서 SELECT 절을 사용하여 필요한 열을 지정하고, 해당 열만을 선택하여 결과를 반환합니다.
예를 들어, "주문 데이터에서 고객 이름과 주문 날짜만을 선택"하는 것이 프로젝트 연산의 예입니다.

조인 연산 (Join Operation):
조인 연산은 둘 이상의 테이블이나 데이터 소스를 결합하여 하나의 결과를 생성하는 연산입니다.
일반적으로 특정 열(속성)을 기준으로 두 테이블을 연결하고, 해당 열의 값이 일치하는 행들을 결합하여 결과를 반환합니다.
예를 들어, "고객 정보와 주문 정보를 고객 ID를 기준으로 조인하여 고객별 주문 내역을 생성"하는 것이 조인 연산의 예입니다.



셀렉트문(Select 문) 
데이터베이스에서 데이터를 조회하는 데 사용되는 SQL(Structured Query Language)의 기본적인 구문입니다. 
셀렉트문은 데이터베이스 테이블에서 특정 열(속성)이나 특정 행(레코드)을 선택하여 결과를 반환하는 데에 쓰입니다. 이 구문은 데이터베이스에서 가장 자주 사용되는 구문 중 하나입니다.
ex)
SELECT column1, column2, ...
FROM table_name
WHERE condition;

SELECT name, age
FROM customers
WHERE age > 30;


'AS' 
열 또는 테이블에 별칭(alias)을 지정하는 데 사용됩니다. 
별칭은 열 또는 테이블의 이름을 대체하는 것으로, 쿼리 결과를 보다 가독성 있게 만들거나 특정 목적에 맞게 사용할 수 있습니다.
ex)
SELECT column1 AS alias1, column2 AS alias2
FROM table_name;

SELECT t.column1, t.column2
FROM table_name AS t;


'ORDER BY'
쿼리 결과를 지정된 열을 기준으로 정렬하는 데 사용됩니다. 
이를 통해 데이터를 원하는 순서로 정렬하여 조회할 수 있습니다.
ex)
SELECT column1, column2, ...
FROM table_name
ORDER BY column1 [ASC|DESC], column2 [ASC|DESC], ...;






