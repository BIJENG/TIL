자바와 자바스크립트는 둘 다 객체 지향 프로그래밍 언어이지만, 그들의 객체 모델과 다루는 방식에는 몇 가지 차이가 있습니다.

클래스 기반 vs 프로토타입 기반:

자바는 클래스(class) 기반의 객체 지향 언어입니다. 객체를 생성하기 위해서는 클래스를 정의한 후에 그 클래스의 인스턴스를 생성합니다.
반면 자바스크립트는 프로토타입 기반의 객체 지향 언어입니다. 객체를 생성하기 위해서는 프로토타입(prototype) 객체를 기반으로 새로운 객체를 생성합니다.
상속 방식:

자바에서는 클래스 상속을 사용하여 새로운 클래스를 정의하고 부모 클래스의 특성을 상속받을 수 있습니다.
자바스크립트에서는 프로토타입 체인을 사용하여 상속을 구현합니다. 객체는 다른 객체를 상속받고, 프로토타입 체인을 통해 부모 객체의 프로퍼티와 메서드에 접근할 수 있습니다.
타입 시스템:

자바는 정적 타입(static typing) 언어로, 변수의 타입이 컴파일 시점에 결정되며 런타임에 변경될 수 없습니다.
자바스크립트는 동적 타입(dynamic typing) 언어로, 변수의 타입이 런타임에 결정되며 언제든지 변경될 수 있습니다.
메모리 관리:

자바에서는 가비지 컬렉터가 동적으로 할당된 메모리를 관리합니다.
자바스크립트에서는 가비지 컬렉터가 동적으로 할당된 메모리를 관리하며, 자동으로 더 이상 사용되지 않는 객체를 제거합니다.
클래스의 정의 방식:

자바에서는 클래스를 명시적으로 정의하고 클래스 내부에 필드와 메서드를 정의합니다.
자바스크립트에서는 객체 리터럴을 사용하여 객체를 정의하거나 생성자 함수를 사용하여 객체를 생성하고 메서드를 추가합니다.

------------------------------------------------------------------------------------------------------------------

자주쓰는 배열함수 정리

trim() 
문자열의 양 끝에 있는 공백을 제거하는 메서드이다. 
양 끝의 공백은 스페이스, 탭, 줄바꿈과 같은 공백 문자들을 말한다.
ex)
let str = "   공백이 있는 문자열   ";
let trimmedStr = str.trim();
console.log(trimmedStr); // 출력 결과: "공백이 있는 문자열"

substring() 
문자열에서 지정된 시작 위치부터 지정된 끝 위치 직전까지의 부분 문자열을 반환한다. 
이 메서드는 두 개의 매개변수를 받는다.
ex)
const str = "Hello, world!";
const substr1 = str.substring(7); // 시작 위치(7)부터 끝까지 추출
const substr2 = str.substring(0, 5); // 시작 위치(0)부터 끝 위치(5 직전)까지 추출

console.log(substr1); // "world!" 출력
console.log(substr2); // "Hello" 출력

slice()
문자열이나 배열에서 지정된 시작 인덱스부터 지정된 끝 인덱스 직전까지의 부분 문자열 또는 부분 배열을 반환한다. 
이 메서드는 원본을 변경하지 않고 새로운 부분 문자열 또는 배열을 생성한다.
ex)
const str = "Hello, world!";
const slicedStr1 = str.slice(7); // 시작 위치(7)부터 끝까지 추출
const slicedStr2 = str.slice(0, 5); // 시작 위치(0)부터 끝 위치(5 직전)까지 추출

console.log(slicedStr1); // "world!" 출력
console.log(slicedStr2); // "Hello" 출력

indexOf() 
문자열 내에서 지정된 문자열 또는 문자의 첫 번째 발생 위치를 반환한다. 
이 메서드는 문자열 객체에서 사용할 수 있고, 문자열에서 찾으려는 문자열 또는 문자의 위치를 알고자 할 때 유용하다.
ex)
const str = 'Hello, world!';

// 문자열 내에서 'l'의 첫 번째 발생 위치를 찾는다.
const index1 = str.indexOf('l');
console.log(index1); // 출력 결과: 2

// 문자열 내에서 'l'을 인덱스 3부터 찾는다.
const index2 = str.indexOf('l', 3);
console.log(index2); // 출력 결과: 3

// 문자열 내에서 'z'를 찾는다 (존재하지 않음).
const index3 = str.indexOf('z');
console.log(index3); // 출력 결과: -1

replace()
문자열에서 특정 패턴(문자열 또는 정규 표현식)을 다른 문자열로 대체하는 데 사용된다. 
이 메서드는 새로운 문자열을 반환하며, 원래 문자열은 변경되지 않는다.
ex)
const str = 'apple banana apple banana';
const newStr = str.replace('apple', 'orange');

console.log(newStr); // 'orange banana apple banana'

splice()
배열에서 요소를 추가하거나 제거하는 데 사용된다. 
이 메서드는 원본 배열을 직접 변경하며, 변경된 배열을 반환한다.
ex)
const array = ['apple', 'orange', 'banana', 'grape'];

// 인덱스 2부터 1개의 요소를 제거하고 'melon'을 추가한다.
array.splice(2, 1, 'melon');

console.log(array); // ['apple', 'orange', 'melon', 'grape']

concat()
한 배열의 요소를 다른 배열 또는 값과 결합하여 새로운 배열을 반환한다. 
이 메서드는 기존 배열을 변경하지 않고 새로운 배열을 생성한다.


스프레드 연산자(Spread Operator)
배열이나 문자열과 같은 iterable한 객체를 확장하여 그 안의 요소들을 개별 요소로 분리하는 JavaScript의 문법이다. 
배열이나 객체를 복사하거나 결합하는 데 유용하게 사용된다.
스프레드 연산자는 보통 ...로 표현한다.
ex)
const arr1 = [1, 2, 3];
const arr2 = [4, 5, 6];

const combinedArray = [...arr1, ...arr2];
console.log(combinedArray); // [1, 2, 3, 4, 5, 6]

join()
배열의 모든 요소를 문자열로 결합하여 하나의 문자열로 반환하는 배열 메서드이다. 
이 때, 각 요소 사이에 구분자를 지정할 수 있다.
ex)
const array = ['apple', 'banana', 'orange'];
const result = array.join(', ');

console.log(result); // 'apple, banana, orange'

sort() 
배열의 요소를 정렬하는 데 사용되는 배열 메서드입니다. 
이 메서드는 기본적으로 배열의 요소를 유니코드 코드 포인트 순서에 따라 문자열로 변환하여 정렬한다.
ex)
const numbers = [4, 2, 5, 1, 3];

// 숫자를 오름차순으로 정렬하는 비교 함수
const ascendingOrder = (a, b) => a - b;

console.log(numbers.sort(ascendingOrder)); // [1, 2, 3, 4, 5]

reduce()
배열의 각 요소에 대해 제공된 콜백 함수를 실행하고, 하나의 결과값을 반환한다. 
이 메서드는 각 요소를 순회하면서 콜백 함수를 호출하여 누적된 결과값을 계산하는 데 사용된다.
reduce() 메서드는 초기값(initial value)과 함께 호출될 수 있다. 
초기값이 제공되면 첫 번째 호출 시 콜백 함수의 첫 번째 매개변수로 사용된다. 
초기값이 제공되지 않으면 배열의 첫 번째 요소가 초기값으로 사용되고, 순회는 배열의 두 번째 요소부터 시작한다.
ex)
const array = [1, 2, 3, 4, 5];

// 모든 요소의 합을 계산합니다.
const sum = array.reduce((acc, cur) => acc + cur, 0);

console.log(sum); // 15


hasOwnProperty()
JavaScript 객체의 메서드 중 하나로, 객체가 특정 속성을 직접 소유하고 있는지 여부를 확인하는 데 사용된다.
ex)
object.hasOwnProperty(propertyName)

const obj = {
    name: 'John',
    age: 30
};

console.log(obj.hasOwnProperty('name')); // true
console.log(obj.hasOwnProperty('age')); // true
console.log(obj.hasOwnProperty('gender')); // false

Object.assign()
하나 이상의 소스 객체로부터 대상 객체로 속성을 복사하는 데 사용되는 JavaScript의 정적 메서드이다. 
이 메서드는 대상 객체를 반환하며, 소스 객체에서 대상 객체로 속성을 복사할 때 사용된다.
ex)
const target = {};
const source1 = { a: 1 };
const source2 = { b: 2 };

const result = Object.assign(target, source1, source2);

console.log(target); // { a: 1, b: 2 }
console.log(result === target); // true


split()
문자열을 지정된 구분자(separator)를 기준으로 분할하여 문자열을 배열로 나누는 JavaScript의 내장 함수이다. 
분할된 문자열은 배열의 요소로 저장된다.
ex)
const str = 'apple,banana,orange';

const result = str.split(',');
console.log(result); // ['apple', 'banana', 'orange']

