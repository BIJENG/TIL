html밖에서 스크립트를 짜는법
<script src="main_.js"></script>

main.js 내부는 함수화해서 내부에서만 필요한것을 사용함으로써 겹치는 변수들을 없게한다.
내부구조는 이런식으로 시작
(()=>{


})()

(() => {})()와 같은 패턴은 JavaScript에서 주로 사용되는 즉시 실행 함수 표현(IIFE, Immediately Invoked Function Expression)입니다. 이 패턴은 몇 가지 이유로 사용됩니다:

스코프 격리: 함수 내부에서 선언된 변수는 함수 내부에서만 유효하며 전역 스코프와 충돌할 위험이 없습니다. 이것은 변수명 충돌을 방지하고 전역 네임스페이스를 깔끔하게 유지할 수 있게 합니다.
캡슐화: 함수 내부의 코드는 외부에서 접근할 수 없습니다. 이것은 내부 구현의 세부 사항을 숨기고 필요한 경우 외부와의 상호작용을 인터페이스에 노출할 수 있게 합니다.
모듈화: 이 패턴은 모듈화된 코드를 작성하는 데 유용합니다. 모듈화된 코드를 구성할 때 IIFE를 사용하여 개별 모듈을 정의하고 각 모듈을 즉시 실행하여 모듈 간의 의존성을 관리할 수 있습니다.
변수 충돌 방지: IIFE 내부의 변수는 함수 스코프에 한정되므로 외부에서 선언된 변수와 충돌하는 것을 방지할 수 있습니다.

따라서 (() => {})()와 같은 패턴은 코드를 깔끔하게 유지하고 보다 안정적으로 작성할 수 있게 도와줍니다.

ex) 

(()=>{

    let yOffset = 0; //스크롤값
    
    //현재 섹션번호
    let curSection = 0;

    const sectionSet = [
        //section-0의 정보
        { 
            height : 0, //section-0의 높이
            multiple : 5, //height의 배수
            objs : {
                container : document.querySelector('#section-0'),
                canvas : document.querySelector('#main-canvas'),
                context : document.querySelector('#main-canvas').getContext('2d'),
                messageA : document.querySelector('.section0-message.a'),
                messageB : document.querySelector('.section0-message.b'),
                messageC : document.querySelector('.section0-message.c'),
                messageD : document.querySelector('.section0-message.d'),
                canvasImages : [],
            },
            vals : {
                imageCount : 500,
            }
        },
        //section-1의 정보
        {   
            height : 0, //section-1의 높이
            multiple : 5, //height의 배수

            objs : {
                container : document.querySelector('#section-1'),
            },
            vals : {}
        }
    ];


}) ()

그동안 쓰던거와 다르게 함수내부에서 const sectionSet 이라는 변수를 통해 css에 접근한다.
