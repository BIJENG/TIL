제네릭을 쓰는이유
- 중복된 코딩을 줄이기 위해
 - 클래스를 제네릭화(G. Class), 함수를 제네릭화(G. Method)

 Thread
 - 실행흐름
 일반적으로, 한 프로그램은 하나 이상의 스레드로 구성될 수 있다. 
 각 스레드는 동일한 프로세스 내에서 실행되며, 서로 다른 작업을 수행할 수 있다.

병렬성(Parallelism): 여러 스레드가 동시에 실행될 수 있으므로 여러 작업을 동시에 처리할 수 있다. 이는 시스템의 전체적인 성능을 향상시킬 수 있다.

응답성(Responsiveness): 멀티 스레드 애플리케이션은 한 스레드가 작업을 수행하는 동안 다른 스레드가 사용자 입력에 응답할 수 있다. 이로 인해 애플리케이션의 반응성이 향상된다.

자원 공유(Resource sharing): 여러 스레드는 동일한 메모리 공간에 액세스할 수 있으므로 데이터를 공유하고 효율적으로 처리할 수 있다.

Thread Safety
- 다중 스레드 환경에서 프로그램 또는 라이브러리가 올바르게 동작하는 것을 의미한다. 
  즉, 여러 스레드가 동시에 공유 자원에 접근하고 변경할 때 발생할 수 있는 데이터 불일치나 예기치 않은 동작을 방지하는 것을 목표로 한다.


Hash

해시(Hash)는 임의의 크기를 가진 데이터를 고정된 크기의 데이터로 매핑하는 데 사용되는 알고리즘이다. 
해시 함수는 일반적으로 임의의 길이의 데이터를 입력으로 받아서 고정된 크기의 해시 값(해시 코드 또는 해시)을 출력한다. 
이 때 출력된 해시 값은 일반적으로 고유하고 입력 데이터의 작은 변화에도 크게 다르게 변하는 특징이 있다.

Hash의 특징

고유성(Uniqueness): 서로 다른 입력에 대해 서로 다른 해시 값이 생성. 같은 입력은 항상 같은 해시 값을 생성하지만, 다른 입력은 다른 해시 값을 생성.

고정된 출력 크기(Fixed Output Size): 해시 함수는 일반적으로 고정된 크기의 출력을 생성. 예를 들어, SHA-256 해시 함수는 256비트의 해시 값을 생성.

출력의 난독성(Output Diffusion): 작은 입력 변화에도 큰 출력 변화가 발생. 이것은 해시 함수의 출력이 입력의 각 비트에 영향을 받기 때문에 발생.

출력의 고르지 않은 분포(Non-Invertibility): 일반적으로 해시 함수는 입력 값을 해시 값으로 변환하는 일방향 함수이다. 즉, 해시 값을 통해 입력 값을 복원하는 것이 매우 어려워야 한다.
